{"Name":"JsonTools","Comment":"******************************************************","Uses":["Classes","SysUtils"],"Types":{"EJsonException":{"NodeType":"Class","Parent":[{"Name":"Exception","NodeType":"TypeReference"}],"Published":{},"Code":"EJsonException=class(Exception);","SourcePos":"jsontools.pas (24)"},"TJsonNodeKind":{"EnumValues":["nkObject","nkArray","nkBool","nkNull","nkNumber","nkString"],"NodeType":"EnumerationType","Code":"TJsonNodeKind=(nkObject,nkArray,nkBool,nkNull,nkNumber,nkString);","SourcePos":"jsontools.pas (28)"},"TJsonNode":{"NodeType":"Class","Published":{},"Private":{"Fields":{"FStack":{"Type":{"Name":"Integer","NodeType":"TypeReference"},"Code":"FStack:Integer;","SourcePos":"jsontools.pas (78)"},"FParent":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"FParent:TJsonNode;","SourcePos":"jsontools.pas (79)"},"FName":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"FName:string;","SourcePos":"jsontools.pas (80)"},"FKind":{"Type":{"Name":"TJsonNodeKind","NodeType":"TypeReference","Context":".Types.TJsonNodeKind"},"Code":"FKind:TJsonNodeKind;","SourcePos":"jsontools.pas (81)"},"FValue":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"FValue:string;","SourcePos":"jsontools.pas (82)"},"FList":{"Type":{"Name":"TList","NodeType":"TypeReference"},"Code":"FList:TList;","SourcePos":"jsontools.pas (83)"}},"Methods":{"ParseObject":{"Code":"procedure ParseObject(Node:TJsonNode;var C:PChar);","SourcePos":"jsontools.pas (84)","Params":{"Node":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"Node:TJsonNode","SourcePos":"jsontools.pas (84)"},"C":{"Type":{"Name":"PChar","NodeType":"TypeReference"},"Code":"C:PChar","SourcePos":"jsontools.pas (84)"}},"NodeType":"Procedure"},"ParseArray":{"Code":"procedure ParseArray(Node:TJsonNode;var C:PChar);","SourcePos":"jsontools.pas (85)","Params":{"Node":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"Node:TJsonNode","SourcePos":"jsontools.pas (85)"},"C":{"Type":{"Name":"PChar","NodeType":"TypeReference"},"Code":"C:PChar","SourcePos":"jsontools.pas (85)"}},"NodeType":"Procedure"},"Error":{"Code":"procedure Error(const Msg:string='');","SourcePos":"jsontools.pas (86)","Params":{"Msg":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Msg:string=''","SourcePos":"jsontools.pas (86)"}},"NodeType":"Procedure"},"Format":{"Code":"function Format(const Indent:string):string;","SourcePos":"jsontools.pas (87)","Params":{"Indent":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Indent:string","SourcePos":"jsontools.pas (87)"}},"Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"},"FormatCompact":{"Code":"function FormatCompact:string;","SourcePos":"jsontools.pas (88)","Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"},"Add":{"Code":"function Add(Kind:TJsonNodeKind;const Name,Value:string):TJsonNode;overload;","SourcePos":"jsontools.pas (89)","Params":{"Kind":{"Type":{"Name":"TJsonNodeKind","NodeType":"TypeReference","Context":".Types.TJsonNodeKind"},"Code":"Kind:TJsonNodeKind","SourcePos":"jsontools.pas (89)"},"Name":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Name","SourcePos":"jsontools.pas (89)"},"Value":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Value:string","SourcePos":"jsontools.pas (89)"}},"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"GetRoot":{"Code":"function GetRoot:TJsonNode;","SourcePos":"jsontools.pas (90)","Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"SetKind":{"Code":"procedure SetKind(Value:TJsonNodeKind);","SourcePos":"jsontools.pas (91)","Params":{"Value":{"Type":{"Name":"TJsonNodeKind","NodeType":"TypeReference","Context":".Types.TJsonNodeKind"},"Code":"Value:TJsonNodeKind","SourcePos":"jsontools.pas (91)"}},"NodeType":"Procedure"},"GetName":{"Code":"function GetName:string;","SourcePos":"jsontools.pas (92)","Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"},"SetName":{"Code":"procedure SetName(const Value:string);","SourcePos":"jsontools.pas (93)","Params":{"Value":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Value:string","SourcePos":"jsontools.pas (93)"}},"NodeType":"Procedure"},"GetValue":{"Code":"function GetValue:string;","SourcePos":"jsontools.pas (94)","Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"},"GetCount":{"Code":"function GetCount:Integer;","SourcePos":"jsontools.pas (95)","Type":{"Name":"Integer","NodeType":"TypeReference"},"NodeType":"Procedure"},"GetAsJson":{"Code":"function GetAsJson:string;","SourcePos":"jsontools.pas (96)","Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"},"GetAsArray":{"Code":"function GetAsArray:TJsonNode;","SourcePos":"jsontools.pas (97)","Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"GetAsObject":{"Code":"function GetAsObject:TJsonNode;","SourcePos":"jsontools.pas (98)","Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"GetAsNull":{"Code":"function GetAsNull:TJsonNode;","SourcePos":"jsontools.pas (99)","Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"GetAsBoolean":{"Code":"function GetAsBoolean:Boolean;","SourcePos":"jsontools.pas (100)","Type":{"Name":"Boolean","NodeType":"TypeReference"},"NodeType":"Procedure"},"SetAsBoolean":{"Code":"procedure SetAsBoolean(Value:Boolean);","SourcePos":"jsontools.pas (101)","Params":{"Value":{"Type":{"Name":"Boolean","NodeType":"TypeReference"},"Code":"Value:Boolean","SourcePos":"jsontools.pas (101)"}},"NodeType":"Procedure"},"GetAsString":{"Code":"function GetAsString:string;","SourcePos":"jsontools.pas (102)","Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"},"SetAsString":{"Code":"procedure SetAsString(const Value:string);","SourcePos":"jsontools.pas (103)","Params":{"Value":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Value:string","SourcePos":"jsontools.pas (103)"}},"NodeType":"Procedure"},"GetAsNumber":{"Code":"function GetAsNumber:Double;","SourcePos":"jsontools.pas (104)","Type":{"Name":"Double","NodeType":"TypeReference"},"NodeType":"Procedure"},"SetAsNumber":{"Code":"procedure SetAsNumber(Value:Double);","SourcePos":"jsontools.pas (105)","Params":{"Value":{"Type":{"Name":"Double","NodeType":"TypeReference"},"Code":"Value:Double","SourcePos":"jsontools.pas (105)"}},"NodeType":"Procedure"}}},"Public":{"Methods":{"Destroy":{"Code":"destructor Destroy;override;","SourcePos":"jsontools.pas (109)","Comment":"A parent node owns all children. Only destroy a node if it has no parent.      To destroy a child node use Delete or Clear methods instead.@br ","NodeType":"Procedure"},"GetEnumerator":{"Code":"function GetEnumerator:TJsonNodeEnumerator;","SourcePos":"jsontools.pas (111)","Comment":"GetEnumerator adds 'for ... in' statement support@br ","Type":{"Name":"TJsonNodeEnumerator","NodeType":"TypeReference","Context":".Types.TJsonNodeEnumerator"},"NodeType":"Procedure"},"LoadFromStream":{"Code":"procedure LoadFromStream(Stream:TStream);","SourcePos":"jsontools.pas (113)","Comment":"Loading and saving methods@br ","Params":{"Stream":{"Type":{"Name":"TStream","NodeType":"TypeReference"},"Code":"Stream:TStream","SourcePos":"jsontools.pas (113)"}},"NodeType":"Procedure"},"SaveToStream":{"Code":"procedure SaveToStream(Stream:TStream);","SourcePos":"jsontools.pas (114)","Params":{"Stream":{"Type":{"Name":"TStream","NodeType":"TypeReference"},"Code":"Stream:TStream","SourcePos":"jsontools.pas (114)"}},"NodeType":"Procedure"},"LoadFromFile":{"Code":"procedure LoadFromFile(const FileName:string);","SourcePos":"jsontools.pas (115)","Params":{"FileName":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"FileName:string","SourcePos":"jsontools.pas (115)"}},"NodeType":"Procedure"},"SaveToFile":{"Code":"procedure SaveToFile(const FileName:string);","SourcePos":"jsontools.pas (116)","Params":{"FileName":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"FileName:string","SourcePos":"jsontools.pas (116)"}},"NodeType":"Procedure"},"Parse":{"Code":"procedure Parse(const Json:string);","SourcePos":"jsontools.pas (119)","Comment":"Convert a json string into a value or a collection of nodes. If the      current node is root then the json must be an array or object.@br ","Params":{"Json":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Json:string","SourcePos":"jsontools.pas (119)"}},"NodeType":"Procedure"},"TryParse":{"Code":"function TryParse(const Json:string):Boolean;","SourcePos":"jsontools.pas (121)","Comment":"The same as Parse, but returns true if no exception is caught@br ","Params":{"Json":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Json:string","SourcePos":"jsontools.pas (121)"}},"Type":{"Name":"Boolean","NodeType":"TypeReference"},"NodeType":"Procedure"},"Add":{"Code":"function Add(const Name:string;const S:string):TJsonNode;overload;","SourcePos":"jsontools.pas (132)","Params":{"Name":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Name:string","SourcePos":"jsontools.pas (132)"},"S":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"S:string","SourcePos":"jsontools.pas (132)"}},"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"Delete":{"Code":"procedure Delete(const Name:string);overload;","SourcePos":"jsontools.pas (135)","Params":{"Name":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Name:string","SourcePos":"jsontools.pas (135)"}},"NodeType":"Procedure"},"Clear":{"Code":"procedure Clear;","SourcePos":"jsontools.pas (137)","Comment":"Remove all child nodes@br ","NodeType":"Procedure"},"Child":{"Code":"function Child(const Name:string):TJsonNode;overload;","SourcePos":"jsontools.pas (144)","Comment":"Get a child node by name. If no node is found nil will be returned.@br ","Params":{"Name":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Name:string","SourcePos":"jsontools.pas (144)"}},"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"Find":{"Code":"function Find(const Path:string):TJsonNode;","SourcePos":"jsontools.pas (146)","Comment":"Search for a node using a path string@br ","Params":{"Path":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Path:string","SourcePos":"jsontools.pas (146)"}},"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"ToString":{"Code":"function ToString:string;override;","SourcePos":"jsontools.pas (148)","Comment":"Format the node and all its children as json@br ","Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"}},"Properties":{"Root":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"property Root:TJsonNode read GetRoot;","read":"GetRoot"},"Parent":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"property Parent:TJsonNode read FParent;","read":"FParent"},"Kind":{"Type":{"Name":"TJsonNodeKind","NodeType":"TypeReference","Context":".Types.TJsonNodeKind"},"Code":"property Kind:TJsonNodeKind read FKind write SetKind;","read":"FKind","write":"SetKind"},"Name":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"property Name:string read GetName write SetName;","read":"GetName","write":"SetName"},"Value":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"property Value:string read GetValue write Parse;","read":"GetValue","write":"Parse"},"Count":{"Type":{"Name":"Integer","NodeType":"TypeReference"},"Code":"property Count:Integer read GetCount;","read":"GetCount"},"AsJson":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"property AsJson:string read GetAsJson write Parse;","read":"GetAsJson","write":"Parse"},"AsArray":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"property AsArray:TJsonNode read GetAsArray;","read":"GetAsArray"},"AsObject":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"property AsObject:TJsonNode read GetAsObject;","read":"GetAsObject"},"AsNull":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"property AsNull:TJsonNode read GetAsNull;","read":"GetAsNull"},"AsBoolean":{"Type":{"Name":"Boolean","NodeType":"TypeReference"},"Code":"property AsBoolean:Boolean read GetAsBoolean write SetAsBoolean;","read":"GetAsBoolean","write":"SetAsBoolean"},"AsString":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"property AsString:string read GetAsString write SetAsString;","read":"GetAsString","write":"SetAsString"},"AsNumber":{"Type":{"Name":"Double","NodeType":"TypeReference"},"Code":"property AsNumber:Double read GetAsNumber write SetAsNumber;","read":"GetAsNumber","write":"SetAsNumber"}}},"Code":"TJsonNode=class private FStack:Integer;FParent:TJsonNode;FName:string;FKind:TJsonNodeKind;FValue:string;FList:TList;procedure ParseObject(Node:TJsonNode;var C:PChar);procedure ParseArray(Node:TJsonNode;var C:PChar);procedure Error(const Msg:string='');function Format(const Indent:string):string;function FormatCompact:string;function Add(Kind:TJsonNodeKind;const Name,Value:string):TJsonNode;overload;function GetRoot:TJsonNode;procedure SetKind(Value:TJsonNodeKind);function GetName:string;procedure SetName(const Value:string);function GetValue:string;function GetCount:Integer;function GetAsJson:string;function GetAsArray:TJsonNode;function GetAsObject:TJsonNode;function GetAsNull:TJsonNode;function GetAsBoolean:Boolean;procedure SetAsBoolean(Value:Boolean);function GetAsString:string;procedure SetAsString(const Value:string);function GetAsNumber:Double;procedure SetAsNumber(Value:Double);public destructor Destroy;override;function GetEnumerator:TJsonNodeEnumerator;procedure LoadFromStream(Stream:TStream);procedure SaveToStream(Stream:TStream);procedure LoadFromFile(const FileName:string);procedure SaveToFile(const FileName:string);procedure Parse(const Json:string);function TryParse(const Json:string):Boolean;function Add(const Name:string;K:TJsonNodeKind=nkObject):TJsonNode;overload;function Add(const Name:string;B:Boolean):TJsonNode;overload;function Add(const Name:string;const N:Double):TJsonNode;overload;function Add(const Name:string;const S:string):TJsonNode;overload;procedure Delete(Index:Integer);overload;procedure Delete(const Name:string);overload;procedure Clear;function Child(Index:Integer):TJsonNode;overload;function Child(const Name:string):TJsonNode;overload;function Find(const Path:string):TJsonNode;function ToString:string;override;property Root:TJsonNode read GetRoot;property Parent:TJsonNode read FParent;property Kind:TJsonNodeKind read FKind write SetKind;property Name:string read GetName write SetName;property Value:string read GetValue write Parse;property Count:Integer read GetCount;property AsJson:string read GetAsJson write Parse;property AsArray:TJsonNode read GetAsArray;property AsObject:TJsonNode read GetAsObject;property AsNull:TJsonNode read GetAsNull;property AsBoolean:Boolean read GetAsBoolean write SetAsBoolean;property AsString:string read GetAsString write SetAsString;property AsNumber:Double read GetAsNumber write SetAsNumber;end;","SourcePos":"jsontools.pas (76)"},"TJsonNodeEnumerator":{"NodeType":"RecordType","Public":{"Methods":{"Init":{"Code":"procedure Init(Node:TJsonNode);","SourcePos":"jsontools.pas (51)","Params":{"Node":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"Node:TJsonNode","SourcePos":"jsontools.pas (51)"}},"NodeType":"Procedure"},"GetCurrent":{"Code":"function GetCurrent:TJsonNode;","SourcePos":"jsontools.pas (52)","Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"NodeType":"Procedure"},"MoveNext":{"Code":"function MoveNext:Boolean;","SourcePos":"jsontools.pas (53)","Type":{"Name":"Boolean","NodeType":"TypeReference"},"NodeType":"Procedure"}},"Properties":{"Current":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"property Current:TJsonNode read GetCurrent;","read":"GetCurrent"}}},"Private":{"Fields":{"FNode":{"Type":{"Name":"TJsonNode","NodeType":"TypeReference","Context":".Types.TJsonNode"},"Code":"FNode:TJsonNode;","SourcePos":"jsontools.pas (48)"},"FIndex":{"Type":{"Name":"Integer","NodeType":"TypeReference"},"Code":"FIndex:Integer;","SourcePos":"jsontools.pas (49)"}}},"Code":"TJsonNodeEnumerator=record private FNode:TJsonNode;FIndex:Integer;public procedure Init(Node:TJsonNode);function GetCurrent:TJsonNode;function MoveNext:Boolean;property Current:TJsonNode read GetCurrent;end;","SourcePos":"jsontools.pas (46)"}},"Functions":{"JsonValidate":{"Code":"function JsonValidate(const Json:string):Boolean;","SourcePos":"jsontools.pas (185)","Comment":"JsonValidate tests if a string contains a valid json format@br ","Params":{"Json":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"Json:string","SourcePos":"jsontools.pas (185)"}},"Type":{"Name":"Boolean","NodeType":"TypeReference"},"NodeType":"Procedure"},"JsonNumberValidate":{"Code":"function JsonNumberValidate(const N:string):Boolean;","SourcePos":"jsontools.pas (187)","Comment":"JsonNumberValidate tests if a string contains a valid json formatted number@br ","Params":{"N":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"N:string","SourcePos":"jsontools.pas (187)"}},"Type":{"Name":"Boolean","NodeType":"TypeReference"},"NodeType":"Procedure"},"JsonStringValidate":{"Code":"function JsonStringValidate(const S:string):Boolean;","SourcePos":"jsontools.pas (189)","Comment":"JsonStringValidate tests if a string contains a valid json formatted string@br ","Params":{"S":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"S:string","SourcePos":"jsontools.pas (189)"}},"Type":{"Name":"Boolean","NodeType":"TypeReference"},"NodeType":"Procedure"},"JsonStringEncode":{"Code":"function JsonStringEncode(const S:string):string;","SourcePos":"jsontools.pas (191)","Comment":"JsonStringEncode converts a pascal string to a json string@br ","Params":{"S":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"S:string","SourcePos":"jsontools.pas (191)"}},"Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"},"JsonStringDecode":{"Code":"function JsonStringDecode(const S:string):string;","SourcePos":"jsontools.pas (193)","Comment":"JsonStringEncode converts a json string to a pascal string@br ","Params":{"S":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"S:string","SourcePos":"jsontools.pas (193)"}},"Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"},"JsonToXml":{"Code":"function JsonToXml(const S:string):string;","SourcePos":"jsontools.pas (195)","Comment":"JsonStringEncode converts a json string to xml@br ","Params":{"S":{"Type":{"Name":"string","NodeType":"TypeReference"},"Code":"S:string","SourcePos":"jsontools.pas (195)"}},"Type":{"Name":"string","NodeType":"TypeReference"},"NodeType":"Procedure"}}}